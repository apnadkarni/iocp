#
# Copyright (c) 2020-2021, Ashok P. Nadkarni
# All rights reserved.
#
# See the file LICENSE for license

# This file contains tests for commands from the services.tcl
package require tcltest 2

tcltest::configure {*}$argv

package require iocp_bt

namespace eval iocp::test {
    variable TARGET
    if {[info exists ::env(IOCP_BT_TARGET)]} {
        set TARGET $::env(IOCP_BT_TARGET)
    } else {
        set TARGET "APN"
    }
    variable UNKNOWNADDR 11:11:11:11:11:11
    variable BTADDRRE {([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}}

    # Return non-0 if all elements match and at least one element
    proc lregexpmatch {re result} {
        if {[llength $result] == 0} {
            return 0
        }
        foreach elem $result {
            if {![regexp $re $elem]} {
                return 0
            }
        }
        return 1
    }
    tcltest::customMatch lregexp [namespace current]::lregexpmatch

    proc testbadopt {label cmd optphrase args} {
        set message "bad option \"-badopt\": must be $optphrase"
        test $label-badopt-0 "$label bad option" \
            -body "$cmd -badopt" \
            -result $message -returnCodes error \
            {*}$args
    }
    proc testnumargs {label cmd {fixed {}} {optional {}} args} {
        set minargs [llength $fixed]
        set maxargs [expr {$minargs + [llength $optional]}]
        if {[string match ...? [lindex $optional end]]} {
            unset maxargs
        }
        set message "wrong # args: should be \"$cmd"
        if {[llength $fixed]} {
            append message " $fixed"
        }
        if {[llength $optional]} {
            append message " $optional"
        }
        if {[llength $fixed] == 0 && [llength $optional] == 0} {
            append message " \""
        } else {
            append message "\""
        }
        if {$minargs > 0} {
            set arguments [lrepeat [expr {$minargs-1}] x]
            test $label-minargs-0 "$label no arguments" \
                -body "$cmd" \
                -result $message -returnCodes error \
                {*}$args
            if {$minargs > 1} {
                test $label-minargs-1 "$label missing arguments" \
                    -body "$cmd $arguments" \
                    -result $message -returnCodes error \
                    {*}$args
            }
        }
        if {[info exists maxargs]} {
            set arguments [lrepeat [expr {$maxargs+1}] x]
            test $label-maxargs-0 "$label extra arguments" \
                -body "$cmd $arguments" \
                -result $message -returnCodes error \
                {*}$args
        }
    }

    proc dnames {args} {
        lmap dinfo [iocp::bt::devices {*}$args] {
            dict get $dinfo Name
        }
    }

    # Return a device name and address we can remove
    proc find_victim {args} {
        variable TARGET
        foreach d [dnames -remembered] {
            if {$d ne $TARGET} {
                return $d
            }
        }
        # Retry after inquiring
        foreach d [dnames -remembered -inquire] {
            if {$d ne $TARGET} {
                return $d
            }
        }
        error "Could not find a remembered device"
    }
    proc daddr {name} {
        variable addr_cache
        if {![info exists addr_cache($name)]} {
            set addr_cache($name) [lindex [iocp::bt::device addresses $name] 0]
        }
        return $addr_cache($name)
    }

    proc testradio {} {
        return [lindex [iocp::bt::radios] 0]
    }

    # Checks validity of device information entries as returned by
    # devices command. Returns string of errors (empty if valid)
    proc btdevinfocheck d {
        set errors [list ]
        foreach {field re} {
            Address {^([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}$}
            Name .+
            Class {^\d+$}
            Connected {^0|1$}
            Remembered {^0|1$}
            Authenticated {^0|1$}
            LastSeen {^\d+( \d+){7}$}
            LastUsed {^\d+( \d+){7}$}
            MajorClassName {.*}
            MinorClassName {.*}
            DeviceClasses {.*}
        } {
            if {![dict exists $d $field]} {
                lappend errors "Missing field $field."
            } elseif {![regexp $re [dict get $d $field]]} {
                lappend errors "Field $field value [dict get $d $field] does not match regexp $re"
            }
        }
        return [join $errors \n]
    }

    # Checks validity of radio information entries as returned by
    # radios command. Returns string of errors (empty if valid)
    proc btradioinfocheck r {
        set errors [list ]
        foreach {field re} {
            Address {^([[:xdigit:]]{2}:){5}[[:xdigit:]]{2}$}
            Name .+
            Manufacturer .+
            Class {^\d+$}
            Subversion {^\d+$}
            MajorClassName Computer
            MinorClassName .+
            DeviceClasses {.*}
        } {
            if {![dict exists $r $field]} {
                lappend errors "Missing field $field."
            } elseif {![regexp $re [dict get $r $field]]} {
                lappend errors "Field $field value [dict get $r $field] does not match regexp $re"
            }
        }
        return [join $errors \n]
        
    }
}

namespace eval iocp::test {
    namespace import ::tcltest::test

    puts "Testing with Bluetooth device = $TARGET"

    test bt-version-0 "iocp_bt version" -body {
        package require iocp_bt
    } -result 2.0a0

    testnumargs device "::iocp::bt::device" "subcommand" "?arg ...?"

    ###
    # device addresses, device address

    testbadopt device-addresses "::iocp::bt::device addresses \"$TARGET\"" "-authenticated, -remembered, -unknown, -connected, -inquire, -timeout, or -hradio"
    testnumargs device-addresses "::iocp::bt::device addresses" "name" "?arg ...?"
    testnumargs device-address "::iocp::bt::device address" "name" "?arg ...?"
    set num -1
    test device-addresses-[incr num] {Get device addresses} -body {
        iocp::bt::device addresses $TARGET
    } -result "^$BTADDRRE\$" -match lregexp
    test device-address-[incr num] {Get device address} -body {
        iocp::bt::device addresses $TARGET
    } -result "^$BTADDRRE\$" -match regexp

    foreach opt {-authenticated -inquire -remembered {-timeout 1000 -inquire}} {
        test device-addresses-[incr num] "device addresses $opt" -body {
            iocp::bt::device addresses $TARGET {*}$opt
        } -result "^$BTADDRRE\$" -match lregexp
        test device-address-$num "device address $opt" -body {
            iocp::bt::device address $TARGET {*}$opt
        } -result "^$BTADDRRE\$" -match regexp
    }

    # Options that may not have any matching devices
    # For some reason -connected always returns empty. Not clear
    # what connected means
    foreach opt {-connected} {
        test device-addresses-[incr num] "device addresses $opt" -body {
            set result [iocp::bt::device addresses $TARGET {*}$opt]
            expr {
                  [llength $result] == 0 ||
                  [lregexpmatch "^$BTADDRRE\$" $result]
              }
        } -result 1
    }

    foreach opt {{} {-timeout 1000 -inquire}} {
        test device-addresses-[incr num] "Address for unknown" -body {
            iocp::bt::device addresses nosuchdevice {*}$opt
        } -result {}
    }


    ###
    # device port
    testnumargs device-port "::iocp::bt::device port" "device service_class"
    test device-port-0 {get device service port} -body {
        iocp::bt::device port $TARGET OBEXObjectPush
    } -result {^\d+$} -match regexp
    test device-port-1 {get device service port from address} -body {
        iocp::bt::device port [daddr $TARGET] OBEXObjectPush
    } -result {^\d+$} -match regexp
    test device-port-2 {get device service port from service uuid} -body {
        iocp::bt::device port [daddr $TARGET] 00001105-0000-1000-8000-00805f9b34fb
    } -result {^\d+$} -match regexp

    ###
    # device print
    testnumargs device-print "::iocp::bt::device print" "devinfo"
    test device-print-0 {device print} -body {
        iocp::bt::device print [lindex [iocp::bt::devices] 0]
    } -output {^Device .*\nAddress: .*\nClass: .*\nDevice categories: .*\nAuthenticated: .*\nRemembered: (0|1)\nConnected: (0|1)\nLast seen: .*\nLast used: .*$} -match regexp

    ###
    # device printn
    testnumargs device-printn "::iocp::bt::device printn" "dinfolist" "?detailed?"
    test device-printn-0 {device printn} -body {
        iocp::bt::device printn [iocp::bt::devices]
    } -output {^(([[:xdigit:]]{2}:){5}[[:xdigit:]]{2} .+\n)+\s*$} -match regexp
    test device-printn-1 {device printn nodetail} -body {
        iocp::bt::device printn [iocp::bt::devices] 0
    } -output {^(([[:xdigit:]]{2}:){5}[[:xdigit:]]{2} .+\n)+\s*$} -match regexp
    test device-printn-2 {device printn detail} -body {
        iocp::bt::device printn [iocp::bt::devices] 1
    } -output {^(Device .*\nAddress: .*\nClass: .*\nDevice categories: .*\nAuthenticated: .*\nRemembered: (0|1)\nConnected: (0|1)\nLast seen: .*\nLast used: .*\n-*)+\s*$} -match regexp
    test device-printn-error-0 {device printn error} -body {
        iocp::bt::device printn [iocp::bt::devices] notanint
    } -result {expected boolean value but got "notanint"} -returnCodes error

    ###
    # device remove
    # Does not really seem to have any predictable effect
    testnumargs device-remove "::iocp::bt::device remove" "device" ""
    test device-remove-0 "device remove name" -setup {
        set victim [find_victim -remembered]
    } -body {
        iocp::bt::device remove $victim
        expr {$victim in [dnames -remembered]}
    } -result 0
    test device-remove-1 "device remove address" -setup {
        set victim [find_victim -remembered]
    } -body {
        iocp::bt::device remove [daddr $TARGET]
        expr {$victim in [dnames -remembered]}
    } -result 0

    ###
    # device service_references
    testnumargs device-service_references "::iocp::bt::device service_references" "device service" ""
    test device-service_references-0 "device service_references name" -body {
        expr {[llength [iocp::bt::device service_references $TARGET OBEXObjectPush]] > 0}
    } -result 1
    test device-service_references-1 "device service_references address" -body {
        expr {[llength [iocp::bt::device service_references [daddr $TARGET] OBEXObjectPush]] > 0}
    } -result 1
    test device-service_references-2 "device service_references name uuid" -body {
        expr {[llength [iocp::bt::device service_references $TARGET 00001105-0000-1000-8000-00805f9b34fb]] > 0}
    } -result 1
    test device-service_references-error-0 "device service_references bad name" -body {
        iocp::bt::device service_references NOSUCHDEVICE OBEXObjectPush
    } -result {Could not resolve Bluetooth device name "NOSUCHDEVICE".} -returnCodes error
    test device-service_references-error-1 "device service_references bad address" -body {
        iocp::bt::device service_references $UNKNOWNADDR OBEXObjectPush
    } -result {Bluetooth service search failed. No such service is known. The service cannot be found in the specified name space. } -returnCodes error
    test device-service_references-error-2 "device service_references bad service" -body {
        iocp::bt::device service_references $TARGET NoSuchService
    } -result {Name "NoSuchService" could not be mapped to a UUID} -returnCodes error

    ###
    # device services
    # More rigorous testing in the sdr tests
    testnumargs device-services "::iocp::bt::device services" "device" ""
    test device-services-0 "device services name" -body {
        expr {[llength [iocp::bt::device services $TARGET]] > 0}
    } -result 1
    test device-services-1 "device services addr" -body {
        expr {[llength [iocp::bt::device services [daddr $TARGET]]] > 0}
    } -result 1
    test device-services-error-0 "device services bad name" -body {
        iocp::bt::device services NOSUCHDEVICE
    } -result {Could not resolve Bluetooth device name "NOSUCHDEVICE".} -returnCodes error
    test device-services-error-1 "device services bad name" -body {
        iocp::bt::device services $UNKNOWNADDR
    } -result {Bluetooth service search failed. No such service is known. The service cannot be found in the specified name space. } -returnCodes error

    ###
    # devices and radio devices

    testbadopt devices "::iocp::bt::devices" "-authenticated, -remembered, -unknown, -connected, -inquire, -timeout, or -hradio"
    testnumargs devices "::iocp::bt::devices" "" "?arg ...?"
    testnumargs radio-devices "::iocp::bt::radio devices" "radio" "?arg ...?"
    set num -1
    foreach opt {{} -authenticated -inquire -remembered {-timeout 1000 -inquire}} {
        incr num
        test devices-$num "devices $opt" -body {
            foreach dev [iocp::bt::devices {*}$opt] {
                append results [btdevinfocheck $dev]
            }
            if {![info exists results]} {
                set results "No devices found."
            }
            set results
        } -result {}
        test radio-devices-$num "radio devices $opt" -body {
            foreach dev [iocp::bt::radio devices [testradio] {*}$opt] {
                append results [btdevinfocheck $dev]
            }
            if {![info exists results]} {
                set results "No devices found."
            }
            set results
        } -result {}
    }

    # Options that may not have any matching devices
    # For some reason -connected always returns empty. Not clear
    # what connected means
    foreach opt {-connected} {
        incr num
        test devices-$num "devices $opt" -body {
            set results ""
            foreach dev [iocp::bt::devices {*}$opt] {
                append results [btdevinfocheck $dev]
            }
            set results
        } -result ""
        test radio-devices-$num "radio devices $opt" -body {
            set results ""
            foreach dev [iocp::bt::radio devices [testradio] {*}$opt] {
                append results [btdevinfocheck $dev]
            }
            set results
        } -result ""
    }

    test radio-devices-error-0 "radio devices bad radio" -body {
        iocp::bt::radio devices $UNKNOWNADDR
    } -result {Radio not found.} -returnCodes error

    ###
    # radios

    testnumargs radios "::iocp::bt::radios" "" "?detailed?"
    test radios-0 {Get radios} -body {
        iocp::bt::radios
    } -result "^$BTADDRRE\$" -match lregexp
    test radios-1 {Get radios nodetail} -body {
        iocp::bt::radios 0
    } -result "^$BTADDRRE\$" -match lregexp
    test radios-2 "radions detail" -body {
        foreach dev [iocp::bt::radios 1] {
            append results [btradioinfocheck $dev]
        }
        if {![info exists results]} {
            set results "No devices found."
        }
        set results
    } -result {}
    test radios-error-0 {Get radios arg error} -body {
        iocp::bt::radios x
    } -result {expected boolean value but got "x"} -returnCodes error

    ###
    # radio info
    testnumargs radio-info "::iocp::bt::radio info" "" "?radio?"
    test radio-info-0 "radio info" -body {
        btradioinfocheck [iocp::bt::radio info]
    } -result ""
    test radio-info-1 "radio info radio" -body {
        btradioinfocheck [iocp::bt::radio info [testradio]]
    } -result ""
    test radio-info-1 "radio info radio" -body {
        btradioinfocheck [iocp::bt::radio info $UNKNOWNADDR]
    } -result "Radio not found." -returnCodes error

    ###
    # radio configure
    testnumargs radio-configure "::iocp::bt::radio configure" "radio" "?arg ...?"
    test radio-configure-0 "radio configure" -setup {
        set r [lindex [iocp::bt::radios] 0]
        set settings [iocp::bt::radio configure $r]
    } -cleanup {
        iocp::bt::radio configure $r {*}$settings
    } -body {
        # This test will often fail - Windows bug - see google as
        # it does not reliable turn BT discoverability off
        list \
            [iocp::bt::radio configure $r -discoverable 0] \
            [iocp::bt::radio configure $r -connectable 0] \
            [iocp::bt::radio configure $r -discoverable] \
            [iocp::bt::radio configure $r -connectable] \
            [iocp::bt::radio configure $r -discoverable 1 -connectable 1] \
            [iocp::bt::radion configure $r]
    } -result [list {} {} 0 0 {} {-discoverable 1 -connectable 1}]

    ################################################################

    test bt-socket-0 "Basic socket connect" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
    } -body {
        close [::iocp::bt::socket [daddr $TARGET] $port]
    } -result ""
    test bt-socket-1 "Basic socket connect -async" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
    } -body {
        set so [::iocp::bt::socket -async [daddr $TARGET] $port]
        fileevent $so writable [list apply {{so} {
            fileevent $so writable ""
            set ::gate [eof $so]
            close $so
        }} $so]
        vwait ::gate
        set ::gate
    } -result 0
    test bt-socket-error-0 "Basic socket fail to connect" -body {
        ::iocp::bt::socket $UNKNOWNADDR 7
    } -result {couldn't open socket: connection timed out} -returnCodes error
    test bt-socket-error-1 "Basic socket connect -async" -body {
        set so [::iocp::bt::socket -async $UNKNOWNADDR 7]
        fileevent $so writable [list apply {{so} {
            fileevent $so writable ""
            set ::gate [list [fconfigure $so -connecting] [fconfigure $so -error]]
            close $so
        }} $so]
        vwait ::gate
        set ::gate
    } -result [list 0 {connection timed out}]
    test bt-socket-error-2 "Basic socket bad port" -body {
        ::iocp::bt::socket [daddr $TARGET] 25
    } -result {couldn't open socket: host is down} -returnCodes error

    # TBD - socket data tests need a remote server. Currently rely on
    # obex tests

    ###
    # fconfigure
    test bt-socket-configure-0 "get socket configuration" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
        set so [::iocp::bt::socket [daddr $TARGET] $port]
    } -cleanup {
        close $so
    } -body {
        lsort [dict keys [fconfigure $so]]
    } -result [lsort {-blocking -buffering -buffersize -encoding -eofchar -translation -peername -sockname -error -connecting -maxpendingreads -maxpendingwrites -maxpendingaccepts -sosndbuf -sorcvbuf -nagle}]

    test bt-socket-configure-1 "socket configure readwrite opts" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
        set so [::iocp::bt::socket [daddr $TARGET] $port]
    } -cleanup {
        close $so
    } -body {
        set result {}
        foreach {opt vals} {
            -buffering {none line full}
            -buffersize 1024
            -encoding {utf-8 cp1252}
            -eofchar {{X Y}}
            -translation {{lf lf} {cr cr}}
            -maxpendingreads 3
            -maxpendingwrites 3
            -sosndbuf 1000
            -sorcvbuf 1000
            -nagle {0 1}
        } {
            foreach val $vals {
                fconfigure $so $opt $val
                set val2 [fconfigure $so $opt]
                if {$val != $val2} {
                    lappend result "$opt not configured ($val != $val2)"
                }
            }
        }
        join $result \n
    } -result {}
    test bt-socket-configure-2 "get socket readonly configuration" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
        set so [::iocp::bt::socket [daddr $TARGET] $port]
    } -cleanup {
        close $so
    } -body {
        set result {}
        set myaddr [dict get [iocp::bt::radio info] Address]
        foreach {opt expected} [list \
                                    -error {} \
                                    -connecting 0 \
                                    -sockname [list $myaddr $myaddr 0] \
                                    -peername [list [daddr $TARGET] [daddr $TARGET] $port]
                               ] \
            {
                set val [fconfigure $so $opt]
                if {$val != $expected} {
                    append result "$opt value ($val) != expected ($expected)"
                }
            }
        join $result \n
    } -result {}
    test bt-socket-configure-get-keepalive "socket configure -keepalive" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
        set so [::iocp::bt::socket [daddr $TARGET] $port]
    } -cleanup {
        close $so
    } -body {
        set myaddr [dict get [iocp::bt::radio info] Address]
        fconfigure $so -keepalive
    } -result {getsockopt failed: An unknown, invalid, or unsupported option or level was specified in a getsockopt or setsockopt call. } -returnCodes error
    test bt-socket-configure-get-badoption "socket configure badoption" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
        set so [::iocp::bt::socket [daddr $TARGET] $port]
    } -cleanup {
        close $so
    } -body {
        set myaddr [dict get [iocp::bt::radio info] Address]
        fconfigure $so -nosuchoption
    } -result {bad option "-nosuchoption": should be one of -blocking, -buffering, -buffersize, -encoding, -eofchar, -translation, -peername, -sockname, -error, -connecting, -maxpendingreads, -maxpendingwrites, -maxpendingaccepts, -sosndbuf, -sorcvbuf, -keepalive, or -nagle} -returnCodes error

    test bt-socket-configure-blocking "socket configure -blocking" -setup {
        set port [::iocp::bt::device port $TARGET OBEXObjectPush]
        set so [::iocp::bt::socket [daddr $TARGET] $port]
    } -cleanup {
       close $so
    } -body {
        list \
            [fconfigure $so -blocking 0] \
            [read $so] \
            [fconfigure $so -blocking 1] \
            [fconfigure $so -blocking]
    } -result [list {} {} {} 1]


    ################################################################
    # sdr

    proc getsdrs {} {
        variable TARGET
        variable SDRS
        if {![info exists SDRS]} {
            set dev  [iocp::bt::device address $TARGET]
            set SDRS [iocp::bt::device services $dev]
        }
        return $SDRS
    }
    proc getsdr {} {
        variable SDR
        if {[info exists SDR]} {
            return $SDR
        }
        foreach sdr [getsdrs] {
            set decoded [iocp::bt::sdr::decode $sdr]
            if {[iocp::bt::sdr::attribute get $decoded ServiceClassIDList idlist]} {
                foreach svc $idlist {
                    if {[dict get $svc Name] eq "OBEXObjectPush"} {
                        set SDR $sdr
                        return $sdr
                    }
                }
            }
        }
        error "Could not get SDR for OBEXObjectPush"
    }

    ###
    # sdr decode

    testnumargs sdr-decode "::iocp::bt::sdr::decode" "binsdr" ""
    test sdr-decode-0 {sdr decode} -body {
        # Just basic tests here that no errors are generated in decoding.
        # The attribute tests will do the hard work
        foreach sdr [getsdrs] {
            iocp::bt::sdr::decode $sdr
        }
    } -result {}

    ###
    # sdr attribute exists
    testnumargs sdr-attribute-exists "::iocp::bt::sdr::attribute exists" "sdr attr_id" "?varname?"
    test sdr-attribute-exists-0 "SDR attribute exists" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute exists $sdr ServiceClassIDList
    } -result 1
    test sdr-attribute-exists-1 "SDR attribute exists" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        # 1 -> ServiceClassIdList
        iocp::bt::sdr::attribute exists $sdr 1
    } -result 1
    test sdr-attribute-exists-2 "SDR attribute does not exist" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute exists $sdr 99
    } -result 0
    test sdr-attribute-exists-3 "SDR attribute exists var" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        list [iocp::bt::sdr::attribute exists $sdr ServiceClassIDList x] $x
    } -result [list 1 {sequence {{uuid 00001105-0000-1000-8000-00805f9b34fb}}}]
    test sdr-attribute-exists-4 "SDR attribute exists var" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        # 1 -> ServiceClassIdList
        list [iocp::bt::sdr::attribute exists $sdr 1 x] $x
    } -result [list 1 {sequence {{uuid 00001105-0000-1000-8000-00805f9b34fb}}}]
    test sdr-attribute-exists-error-0 "SDR attribute unknown name" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute exists $sdr xxx
    } -result {key "xxx" not known in dictionary} -returnCodes error

    ###
    # sdr attribute raw
    testnumargs sdr-attribute-raw "::iocp::bt::sdr::attribute raw" "sdr attr_id" ""
    test sdr-attribute-raw-0 "SDR attribute raw" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute raw $sdr ServiceClassIDList
    } -result {sequence {{uuid 00001105-0000-1000-8000-00805f9b34fb}}}
    test sdr-attribute-raw-1 "SDR attribute raw - numeric id" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute raw $sdr 1
    } -result {sequence {{uuid 00001105-0000-1000-8000-00805f9b34fb}}}
    test sdr-attribute-raw-error-0 "SDR attribute unknown name" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute raw $sdr xxx
    } -result {key "xxx" not known in dictionary} -returnCodes error
    test sdr-attribute-raw-error-1 "SDR attribute missing attribute" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute raw $sdr 99
    } -result {Attribute with id "99" not found.} -returnCodes error


    ###
    # sdr attribute get
    testnumargs sdr-attribute-get "::iocp::bt::sdr::attribute get" "sdr attr_id" "?varname?"
    test sdr-attribute-get-0 "SDR attribute get" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute get $sdr ServiceClassIDList
    } -result {{Uuid 00001105-0000-1000-8000-00805f9b34fb Name OBEXObjectPush}}
    test sdr-attribute-get-1 "SDR attribute get numeric id" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute get $sdr 1
    } -result {{Uuid 00001105-0000-1000-8000-00805f9b34fb Name OBEXObjectPush}}
    test sdr-attribute-get-2 "SDR attribute get var" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        list \
            [iocp::bt::sdr::attribute get $sdr ServiceClassIDList x] \
            $x
    } -result [list 1 {{Uuid 00001105-0000-1000-8000-00805f9b34fb Name OBEXObjectPush}}]
    test sdr-attribute-get-3 "SDR attribute get numeric id var" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        list \
            [iocp::bt::sdr::attribute get $sdr 1 x] \
            $x
    } -result [list 1 {{Uuid 00001105-0000-1000-8000-00805f9b34fb Name OBEXObjectPush}}]
    test sdr-attribute-get-4 "SDR attribute get numeric id var - not present" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        set x unchanged
        list \
            [iocp::bt::sdr::attribute get $sdr IconURL x] \
            $x
    } -result [list 0 unchanged]
    test sdr-attribute-get-error-0 "SDR attribute get missing" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        # 12 -> IconURL
        iocp::bt::sdr::attribute get $sdr IconURL
    } -result {Attribute with id "12" not found.} -returnCodes error
    test sdr-attribute-get-error-1 "SDR attribute get unknown name" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute get $sdr xxx
    } -result {Unknown attribute "xxx".} -returnCodes error
    test sdr-attribute-get-error-2 "SDR attribute get unknown name var" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute get $sdr xxx var
    } -result {Unknown attribute "xxx".} -returnCodes error

    ###
    # sdr attribute text
    testnumargs sdr-attribute-text "::iocp::bt::sdr::attribute text" "sdr attr_id lang" "?varname?"
    test sdr-attribute-text-0 "attribute text" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute text $sdr ServiceName primary
    } -result "OBEX Object Push"
    test sdr-attribute-text-1 "attribute text en" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute text $sdr ServiceName en
    } -result "OBEX Object Push"
    test sdr-attribute-text-2 "attribute text fr" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        # If lang does not exist, returns primary
        iocp::bt::sdr::attribute text $sdr ServiceName fr
    } -result "OBEX Object Push"
    test sdr-attribute-text-3 "attribute text numeric" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute text $sdr 256 primary
    } -result "OBEX Object Push"
    test sdr-attribute-text-4 "attribute text var" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        list \
            [iocp::bt::sdr::attribute text $sdr ServiceName primary x] \
            $x
    } -result [list 1 "OBEX Object Push"]
    test sdr-attribute-text-5 "attribute text var - missing" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        set x unchanged
        list \
            [iocp::bt::sdr::attribute text $sdr ProviderName primary x] \
            $x
    } -result [list 0 unchanged]
    test sdr-attribute-text-error-0 "attribute text - missing" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute text $sdr ProviderName primary
    } -result "Attribute not found in SDR." -returnCodes error
    test sdr-attribute-text-error-0 "attribute text - missing" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attribute text $sdr ServiceClassIDList primary
    } -result {Invalid text attribute id "ServiceClassIDList".} -returnCodes error

    ###
    # sdr attributes
    testnumargs sdr-attributes "::iocp::bt::sdr::attributes" "sdr" ""
    test sdr-attributes-0 "sdr attributes" -body {
        set sdr [iocp::bt::sdr::decode [getsdr]]
        iocp::bt::sdr::attributes $sdr
    } -result {^\d+$} -match lregexp

    ###
    # sdr print
    testnumargs sdr-print "::iocp::bt::sdr::print" "rec" "?attrfilter?"
    test sdr-print-0 "sdr print" -body {
        iocp::bt::sdr::print [getsdr]
        # Order may be random so cannot really match more detail
    } -output "ServiceClassIDList: sequence.*00001105-0000-1000-8000-00805f9b34fb OBEXObjectPush" -match regexp
    test sdr-print-1 "sdr print attrfilter" -body {
        iocp::bt::sdr::print [getsdr] ServiceClass*
    } -output "ServiceClassIDList: sequence\n    00001105-0000-1000-8000-00805f9b34fb OBEXObjectPush\n"

    testnumargs sdr-printn "::iocp::bt::sdr::printn" "recs" "?attrfilter?"
    test sdr-printn-0 "sdr printn" -body {
        iocp::bt::sdr::printn [getsdrs]
        # Order may be random so cannot really match more detail
    } -output "(ServiceClassIDList.*\n-+\n)+.*" -match regexp
    test sdr-printn-1 "sdr printn attrfilter" -body {
        iocp::bt::sdr::printn [getsdrs] ServiceClass*
    } -output "(ServiceClassIDList.*\n-+\n)+.*" -match regexp

    ###
    # names attribute_id

    testnumargs names-attribute_id "::iocp::bt::names::attribute_id" "name" ""
    test names-attribute_id-0 "attribute id of name" -body {
        iocp::bt::names::attribute_id ServiceClassIDList
    } -result 1
    test names-attribute_id-1 "attribute id of id" -body {
        iocp::bt::names::attribute_id 1
    } -result 1
    test names-attribute_id-2 "attribute id of localized text attribute" -body {
        iocp::bt::names::attribute_id ServiceName
    } -result 256

    ###
    # names attribute_name
    testnumargs names-attribute_name "::iocp::bt::names::attribute_name" "attr_id" ""
    test names-attribute_name-0 "attribute name of name" -body {
        iocp::bt::names::attribute_name ServiceClassIDList
    } -result ServiceClassIDList
    test names-attribute_name-1 "attribute name of id" -body {
        iocp::bt::names::attribute_name 1
    } -result ServiceClassIDList
    test names-attribute_name-2 "attribute name of loclaized text id" -body {
        iocp::bt::names::attribute_name 256
    } -result ServiceName

    ###
    # names profile_name
    testnumargs names-profile_name "::iocp::bt::names::profile_name" "uuid" ""
    test names-profile_name-0 "Profile name - short uuid" -body {
        iocp::bt::names::profile_name 1134
    } -result "Message Access Profile"
    test names-profile_name-1 "Profile name - uuid" -body {
        iocp::bt::names::profile_name 00001134-0000-1000-8000-00805f9b34fb
    } -result "Message Access Profile"

    ###
    # names protocol_name
    testnumargs names-protocol_name "::iocp::bt::names::protocol_name" "uuid" ""
    test names-protocol_name-0 "protocol name - short uuid" -body {
        iocp::bt::names::protocol_name 0003
    } -result RFCOMM
    test names-protocol_name-1 "protocol name - uuid" -body {
        iocp::bt::names::protocol_name 00000003-0000-1000-8000-00805f9b34fb
    } -result RFCOMM

    ###
    # names protcol_uuid
    testnumargs names-protocol_uuid "::iocp::bt::names::protocol_uuid" "name" ""
    test names-protocol_uuid-0 "protocol uuid - name" -body {
        iocp::bt::names::protocol_uuid RFCOMM
    } -result 00000003-0000-1000-8000-00805f9b34fb
    test names-protocol_uuid-1 "protocol uuid - uuid" -body {
        iocp::bt::names::protocol_uuid 00000003-0000-1000-8000-00805f9b34fb
    } -result 00000003-0000-1000-8000-00805f9b34fb

    ###
    # names service_class_name
    testnumargs names-service_class_name "::iocp::bt::names::service_class_name" "uuid" ""
    test names-service_class_name-0 "service_class name - short uuid" -body {
        iocp::bt::names::service_class_name 110a
    } -result "AudioSource"
    test names-service_class_name-1 "service_class name - uuid" -body {
        iocp::bt::names::service_class_name 0000110A-0000-1000-8000-00805F9B34FB
    } -result "AudioSource"

    ###
    # names service_class_uuid
    testnumargs names-service_class_uuid "::iocp::bt::names::service_class_uuid" "name" ""
    test names-service_class_uuid-0 "service_class uuid - name" -body {
        iocp::bt::names::service_class_uuid AudioSource
    } -result 0000110a-0000-1000-8000-00805f9b34fb
    test names-service_class_uuid-1 "service_class uuid - uuid" -body {
        iocp::bt::names::service_class_uuid 0000110a-0000-1000-8000-00805f9b34fb
    } -result 0000110a-0000-1000-8000-00805f9b34fb

    ###
    # to_uuid
    testnumargs names-to_uuid "::iocp::bt::names::to_uuid" "name_or_uuid" ""
    test names-to_uuid-0 "to_uuid - service class name" -body {
        iocp::bt::names::to_uuid AudioSource
    } -result 0000110a-0000-1000-8000-00805f9b34fb
    test names-to_uuid-1 "to_uuid - protocol name" -body {
        iocp::bt::names::to_uuid RFCOMM
    } -result 00000003-0000-1000-8000-00805f9b34fb

    ###
    # names to_name
    testnumargs names-to_name "::iocp::bt::names::to_name" "uuid" ""
    test names-to_name-0 "to_name service class short uuid" -body {
        iocp::bt::names::to_name 110a
    } -result "AudioSource"
    test names-to_name-1 "to_name service class short uuid" -body {
        iocp::bt::names::to_name 0000110A-0000-1000-8000-00805F9B34FB
    } -result "AudioSource"
    test names-to_name-2 "to_name protocol short uuid" -body {
        iocp::bt::names::to_name 0003
    } -result "RFCOMM"
    test names-to_name-3 "to_name protocol uuid" -body {
        iocp::bt::names::to_name 00000003-0000-1000-8000-00805f9b34fb
    } -result "RFCOMM"

    ################################################################
    ::tcltest::cleanupTests
}

namespace delete iocp::test
